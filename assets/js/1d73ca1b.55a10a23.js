"use strict";(self.webpackChunkmy_website_ts=self.webpackChunkmy_website_ts||[]).push([[669],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1059:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={},l="CI Bits",c={unversionedId:"docs/misc/CI_BITS",id:"docs/misc/CI_BITS",title:"CI Bits",description:"Some parts pulled from the cocoapods ci setup. We may want to add some back, but I don't think we need all of this.",source:"@site/docs/docs/misc/CI_BITS.md",sourceDirName:"docs/misc",slug:"/docs/misc/CI_BITS",permalink:"/KMMBridge/docs/docs/misc/CI_BITS",draft:!1,editUrl:"https://github.com/touchlab/KMMBridge/tree/main/website/docs/docs/misc/CI_BITS.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1665329918,formattedLastUpdatedAt:"10/9/2022",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/KMMBridge/docs/docs/TROUBLESHOOTING"}},p={},u=[{value:"Reading from iOS Repo",id:"reading-from-ios-repo",level:3},{value:"Using HTTPS",id:"using-https",level:2},{value:"Taking Podspec URL as a Property",id:"taking-podspec-url-as-a-property",level:3},{value:"Running Locally",id:"running-locally",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ci-bits"},"CI Bits"),(0,a.kt)("p",null,"Some parts pulled from the cocoapods ci setup. We may want to add some back, but I don't think we need all of this."),(0,a.kt)("h3",{id:"reading-from-ios-repo"},"Reading from iOS Repo"),(0,a.kt)("p",null,"If you have a multirepo setup, and you want your separate iOS repo to be able to pull the remote podspec from a private repo\nfor CI, you'll need to repeat the steps for creating, adding, and using a deploy key above. When you add a deploy key for\na consumer only you should leave write access off to limit the permissions as much as possible."),(0,a.kt)("h2",{id:"using-https"},"Using HTTPS"),(0,a.kt)("p",null,"If you need to be able to access the Podspec repo via HTTPS in CI you'll need to do a bit of extra configuration in your\n",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Podfile"),". GitHub recommends Deploy Keys to access private repos from CI, but these changes can also\nbe helpful if your team is split between using HTTPS and ssh to clone git repos."),(0,a.kt)("h3",{id:"taking-podspec-url-as-a-property"},"Taking Podspec URL as a Property"),(0,a.kt)("p",null,"Accessing a private GitHub repo from CI requires us to change the Podspec repo URL to include a username and Personal Access Token which\nwe don't want to check in to source control, so we need to be able to take the URL as a gradle property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'kmmbridge {\n    // You can also make this default to an empty string if your developers don\'t need to run the publish task locally\n    val PODSPEC_URL: String = project.property("PODSPEC_URL") as String\n    faktoryReadKey.set("READKEY")\n    cocoapods(PODSPEC_URL)\n}\n')),(0,a.kt)("p",null,"You'll also need to change how you add the Podspec source in your Podfiles so it can change based on the local environment\nto include authentication in CI.\nTo do that we'll add the repo globally and have the Podfile refer to the local reference rather than a URL."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'// This handles users who have a custom cocoapods home directory\nif ENV.include?("CP_HOME_DIR")\n  source ENV["CP_HOME_DIR"] + \'/repos/touchlab\'\nelse\n  source ENV["HOME"] + \'/.cocoapods/repos/touchlab\'\nend\n')),(0,a.kt)("p",null,"In the snippet above ",(0,a.kt)("inlineCode",{parentName:"p"},"touchlab")," is an alias for the private podspec repo. Make sure to use the same alias when you add the repo."),(0,a.kt)("h3",{id:"running-locally"},"Running Locally"),(0,a.kt)("p",null,"If you've set your build up to take the podspec URL as a property either for CI or to allow developers to use SSH or HTTPS,\nyou'll need to make sure that is available in your local environment."),(0,a.kt)("p",null,"To set up the gradle property, you can either set an environment variable or set it in ",(0,a.kt)("inlineCode",{parentName:"p"},"gradle.properties")," in your\n",(0,a.kt)("inlineCode",{parentName:"p"},"GRADLE_USER_HOME")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// gradle.properties\nPODSPEC_URL=<https or ssh url>\n// .bashrc/.zshrc/etc \nexport ORG_GRADLE_PROJECT_PODSPEC_URL=<https or ssh url> \n")))}m.isMDXComponent=!0}}]);